from java.lang import System
import os

def initConfigToScriptRun():
    global startedNewServer
    loadProperties("/u01/software/domain.properties")
    hideDisplay()
    hideDumpStack("true")
    # try connecting to a running server if it is already running ...
    if connected=="false":
        try:
            URL="t3://"+adminServerListenAddress+":"+adminServerListenPort
            connect(userName, os.environ['weblogic_admin_password'], URL)
        except WLSTException:
            print 'No server is running at '+URL+', the script will start a new server'
    hideDumpStack("false")
    if connected=="false":
        print 'Starting a brand new server at '+URL+' with server name '+adminServerName
        print 'Please see the server log files for startup messages available at '+domainDir
        # If a config.xml exists in the domainDir, WLST will use that config.xml to bring up the server.
        # If you would like WLST to overwrite this directory, you should specify overWriteRootDir='true' as shown below
        # startServer(adminServerName, domName, URL, userName, os.environ['weblogic_admin_password'),domainDir, overWriteRootDir='true']
        _timeOut = Integer(TimeOut)
        # If you want to specify additional JVM arguments, set them using startServerJvmArgs in the property file or below
        _startServerJvmArgs=startServerJvmArgs
        if (_startServerJvmArgs=="" and (System.getProperty("java.vendor").find("Sun")>=0 or System.getProperty("java.vendor").find("Hewlett")>=0)):
            _startServerJvmArgs = " -XX:MaxPermSize=128m"
        if overWriteRootDir=='true':
            startServer(adminServerName, domName, URL, userName, os.environ['weblogic_admin_password'],domainDir, timeout=_timeOut.intValue(), overWriteRootDir='true', block='true', jvmArgs=_startServerJvmArgs)
        else:
            startServer(adminServerName, domName, URL, userName, os.environ['weblogic_admin_password'],domainDir, timeout=_timeOut.intValue(), block='true', jvmArgs=_startServerJvmArgs)
        startedNewServer=1
        print "Started Server. Trying to connect to the server ... "
        connect(userName, os.environ['weblogic_admin_password'], URL)
        if connected=='false':
            stopExecution('You need to be connected.')

def startTransaction():
    edit()
    startEdit()

def endTransaction():
    startEdit()
    save()
    activate(block="true")

def endOfScriptRun():
    global startedNewServer
    #Save the changes you have made
    # shutdown the server you have started
    if startedNewServer==1:
        print 'Shutting down the server that is started... '
        shutdown(force='true', block='true')
    print 'Done executing the script.'

def create_Realm(path, beanName):
    cd(path)
    try:
        print "creating mbean of type Realm ... "
        theBean = cmo.lookupRealm(beanName)
        if theBean == None:
            cmo.createRealm(beanName)
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_Authorizer(path, beanName):
    cd(path)
    try:
        print "creating mbean of type Authorizer ... "
        theBean = cmo.lookupAuthorizer(beanName)
        if theBean == None:
            cmo.createAuthorizer(beanName,"weblogic.security.providers.xacml.authorization.XACMLAuthorizer")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_Adjudicator(path, beanName):
    cd(path)
    try:
        print "creating mbean of type Adjudicator ... "
        theBean = cmo.getAdjudicator()
        if theBean == None:
            cmo.createAdjudicator(beanName,"weblogic.security.providers.authorization.DefaultAdjudicator")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_AuthenticationProvider(path, beanName):
    cd(path)
    try:
        print "creating mbean of type AuthenticationProvider ... "
        theBean = cmo.lookupAuthenticationProvider(beanName)
        if theBean == None:
            cmo.createAuthenticationProvider(beanName,"weblogic.security.providers.authentication.DefaultAuthenticator")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_OIDAuthenticationProvider(path, beanName):
    cd(path)
    try:
        print "creating mbean of type OracleInternetDirectoryAuthenticator ... "
        theBean = cmo.lookupAuthenticationProvider(beanName)
        if theBean == None:
            cmo.createAuthenticationProvider("OIDAuthenticator","weblogic.security.providers.authentication.OracleInternetDirectoryAuthenticator")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_CertPathProvider(path, beanName):
    cd(path)
    try:
        print "creating mbean of type CertPathProvider ... "
        theBean = cmo.lookupCertPathProvider(beanName)
        if theBean == None:
            cmo.createCertPathProvider(beanName,"weblogic.security.providers.pk.WebLogicCertPathProvider")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_CredentialMapper(path, beanName):
    cd(path)
    try:
        print "creating mbean of type CredentialMapper ... "
        theBean = cmo.lookupCredentialMapper(beanName)
        if theBean == None:
            cmo.createCredentialMapper(beanName,"weblogic.security.providers.credentials.DefaultCredentialMapper")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def create_RoleMapper(path, beanName):
    cd(path)
    try:
        print "creating mbean of type RoleMapper ... "
        theBean = cmo.lookupRoleMapper(beanName)
        if theBean == None:
            cmo.createRoleMapper(beanName,"weblogic.security.providers.xacml.authorization.XACMLRoleMapper")
    except java.lang.UnsupportedOperationException, usoe:
        pass
    except weblogic.descriptor.BeanAlreadyExistsException,bae:
        pass
    except java.lang.reflect.UndeclaredThrowableException,udt:
        pass

def setAttributesFor_OIDAuthenticator():
    cd("/SecurityConfiguration/" + domName + "/Realms/myrealm/AuthenticationProviders/OIDAuthenticator")
    print "setting attributes for mbean type OracleInternetDirectoryAuthenticator"
    set("Principal", oidPrincipal)
    set("Host", oidHost)
    set("Credential", os.environ['ldap_admin_password'])
    set("ControlFlag", "SUFFICIENT")
    set("UserBaseDN", oidUserBaseDN)
    set("Port", oidPort)
    set("GroupBaseDN", oidGroupBaseDN)

def setAttributesFor_DefaultAuthenticator():
    cd("/SecurityConfiguration/" + domName + "/Realms/myrealm/AuthenticationProviders/DefaultAuthenticator")
    print "setting attributes for mbean type DefaultAuthenticator"
    set("ControlFlag", "OPTIONAL")

def setAttributesFor_DefaultIdentityAsserter():
    cd("/SecurityConfiguration/" + domName + "/Realms/myrealm/AuthenticationProviders/DefaultIdentityAsserter")
    print "setting attributes for mbean type DefaultIdentityAsserter"
    set("ActiveTypes", jarray.array(["AuthenticatedUser"], String))

try:
    initConfigToScriptRun()
    startTransaction()
    create_Realm("/SecurityConfiguration/" + domName, "myrealm")
    create_Authorizer("/SecurityConfiguration/" + domName + "/Realms/myrealm", "XACMLAuthorizer")
    create_Adjudicator("/SecurityConfiguration/" + domName + "/Realms/myrealm", "DefaultAdjudicator")
    create_AuthenticationProvider("/SecurityConfiguration/" + domName + "/Realms/myrealm", "DefaultAuthenticator")
    create_AuthenticationProvider("/SecurityConfiguration/" + domName + "/Realms/myrealm", "DefaultIdentityAsserter")
{% if oid_host is defined %}
    create_OIDAuthenticationProvider("/SecurityConfiguration/" + domName + "/Realms/myrealm", "OIDAuthenticator")
{% endif %}
    create_CertPathProvider("/SecurityConfiguration/" + domName + "/Realms/myrealm", "WebLogicCertPathProvider")
    create_CredentialMapper("/SecurityConfiguration/" + domName + "/Realms/myrealm", "DefaultCredentialMapper")
    create_RoleMapper("/SecurityConfiguration/" + domName + "/Realms/myrealm", "XACMLRoleMapper")
    setAttributesFor_DefaultIdentityAsserter()
    setAttributesFor_DefaultAuthenticator()
{% if oid_host is defined %}
    setAttributesFor_OIDAuthenticator()
{% endif %}
    endTransaction()
finally:
    endOfScriptRun()
